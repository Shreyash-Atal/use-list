{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["clone","obj","JSON","defaultOptions","selectedProp","matchedProp","columns","id","title","sortAsc","width","sampleList","name","age","city","state","hobbies","App","inputList","options","useState","listData","setListData","useEffect","setList","useCallback","list","updatedList","item","addItem","index","deleteItem","deleteItems","indices","filterItems","property","query","x","q","clearFilters","sortItems","ascending","value","currentItem","nextValue","nextItem","returnValue","toggleSelectAllItems","doSelect","toggleSelectItem","useList","users","addUser","deleteUser","deleteUsers","setUsers","sortUsers","filterUsers","toggleSelectUser","toggleSelectAllUsers","sortByColumnId","setSortByColumnId","setSortAsc","filterTerms","setFilterTerms","newUser","Math","round","random","allUsersSelected","setAllUsersSelected","onClick","timer","setTimeout","clearTimeout","fetchUsers","reduce","user","userIndex","chosen","push","style","type","checked","onChange","map","column","paddingBottom","placeholder","event","term","target","prevState","length","filter","isMatched","key","className","evt","join","String","colSpan","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5511cd9d.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nconst clone = obj => JSON.parse(JSON.stringify(obj))\n\nconst defaultOptions = {\n    selectedProp: 'isSelected',\n    matchedProp: 'isMatched',\n}\n\nexport const useList = (inputList = [], options = defaultOptions) => {\n    const [listData, setListData] = useState([])\n    options = { ...defaultOptions, ...options }\n\n    useEffect(() => {\n        setList(inputList)\n    }, [])\n\n    const setList = useCallback(list => {\n        const updatedList = list.filter(item => item !== null).map(item => {\n            if(!!item){\n                const selectedProp = (options && options.selectedProp) || 'isSelected'\n                const matchedProp = (options && options.matchedProp) || 'isMatched'\n                item[selectedProp] = !!item[selectedProp]\n                // item[matchedProp] = !!item[matchedProp]\n                item[matchedProp] = true\n                return item\n            }\n        })\n        setListData(updatedList)\n    }, [])\n\n    const addItem = (item = {}, index = 0) => {\n        const updatedList = clone(listData)\n        !!item ? updatedList.splice(index, 0, clone(item)) : false\n        setList(updatedList)\n    }\n\n    const deleteItem = (index = null) => {\n        const updatedList = clone(listData)\n\n        updatedList.splice(index, 1)\n        setListData(updatedList)\n    }\n\n    const deleteItems = (indices = []) => {\n        const updatedList = clone(listData).filter((item, itemIndex) => !indices.includes(itemIndex))\n        setListData(updatedList)\n    }\n\n    const filterItems = (property = null, query) => {\n        if (property == null || typeof property !== 'string' || !options) {\n            return\n        }\n        let updatedList = clone(listData)\n        updatedList.filter(item=> item !== null).forEach(item => {\n            if(!!item[property]) {\n                const x = typeof item[property] === 'string' ? item[property].toLowerCase() : item[property].toString()\n                const q = typeof item[property] === 'string' ? query.toLowerCase() : query\n                item[options.matchedProp] = x.includes(q)\n                return item\n            } else {\n                item[options.matchedProp] = false\n            }\n        })\n        setListData(updatedList)\n    }\n\n    const clearFilters = () => {\n        let updatedList = clone(listData)\n        updatedList.forEach(item => {\n            item[options.matchedProp] = false\n        })\n        setListData(updatedList)\n    }\n\n    const sortItems = (property = null, ascending = true) => {\n        if (property == null || typeof property !== 'string') {\n            return\n        }\n        let updatedList = clone(listData)\n        updatedList.sort(function(currentItem, nextItem) {\n                const value = !!currentItem ? typeof currentItem[property] === 'string' ? currentItem[property].toLowerCase() : currentItem[property] : null\n                const nextValue = !!nextItem ? typeof nextItem[property] === 'string' ? nextItem[property].toLowerCase() : nextItem[property] : null\n                const returnValue = ascending ? -1 : 1\n                return value < nextValue ? returnValue : value > nextValue ? -returnValue : 0\n        })\n        setListData(updatedList)\n    }\n\n    const toggleSelectAllItems = (doSelect = false) => {\n        if (!options) return\n        const updatedList = clone(listData).map(item => {\n            item[options.selectedProp] = doSelect\n            return item\n        })\n        setListData(updatedList)\n    }\n\n    const toggleSelectItem = (index = 0, doSelect = false) => {\n        if (!(options && listData[index])) return\n        const updatedList = clone(listData)\n        updatedList[index][options.selectedProp] = doSelect\n        setListData(updatedList)\n    }\n\n    return {\n        list: listData,\n        addItem,\n        clearFilters,\n        deleteItem,\n        deleteItems,\n        filterItems,\n        setList,\n        sortItems,\n        toggleSelectItem,\n        toggleSelectAllItems,\n    }\n}\n","import React, { useState } from 'react'\nimport './index.css'\nimport { useList } from 'use-list'\n\nconst columns = [\n    { id: 'id', title: 'ID', sortAsc: null, width: '60px' },\n    { id: 'name', title: 'Name', sortAsc: null, width: '160px' },\n    { id: 'age', title: 'Age', sortAsc: null, width: '100px' },\n    { id: 'city', title: 'City', sortAsc: null, width: '100px' },\n    { id: 'state', title: 'State', sortAsc: null, width: '100px' },\n    { id: 'hobbies', title: 'Hobbies', sortAsc: null, width: '160px' },\n    { id: 'user.chosen', title: 'user.chosen', sortAsc: null, width: '160px' },\n    { id: 'user.isMatched', title: 'user.isMatched', sortAsc: null, width: '200px' },\n]\n\nconst sampleList = [\n    {\n        id: 0,\n        name: 'Alice Smith',\n        age: 23,\n        city: 'New York',\n        state: 'NY',\n        hobbies: ['Basketball', 'Football', ''],\n    },\n    null,\n    {\n        id: 1,\n        name: 'Bob Jones',\n        age: 32,\n        city: 'Los Angeles',\n        state: 'CA',\n        hobbies: [],\n    },\n    {\n        id: 2,\n        name: 'Christine Miller',\n        age: 25,\n        city: 'Boston',\n        state: 'MA',\n        hobbies: ['Tennis', 'Cricket', 'Football', 'Foot', 'Fo'],\n    },\n    {\n        id: 3,\n        name: 'David Adams',\n        age: 29,\n        city: 'Seattle',\n        state: 'WA',\n        hobbies: ['Football', '', 'Cricket'],\n    },\n    {\n        id: 4,\n        name: 'Emma Lee',\n        age: 37,\n        city: 'Washington',\n        state: 'DC',\n        hobbies: ['Cricket', 'Football', null],\n    },\n    {\n        id: 5,\n        name: 'Fred Stein',\n        age: 20,\n        city: 'Chicago',\n        state: 'IL',\n        hobbies: null,\n    },\n    {\n        id: 6,\n        name: 'Chris Harris',\n        age: null,\n        city: 'Chicago',\n        state: 'IL',\n        hobbies: ['Cricket', 'Football'],\n    },\n]\n\nconst App = () => {\n    const {\n        list: users,\n        addItem: addUser,\n        deleteItem: deleteUser,\n        deleteItems: deleteUsers,\n        setList: setUsers,\n        sortItems: sortUsers,\n        filterItems: filterUsers,\n        toggleSelectItem: toggleSelectUser,\n        toggleSelectAllItems: toggleSelectAllUsers,\n    } = useList([], { selectedProp: 'chosen' })\n\n    const [sortByColumnId, setSortByColumnId] = useState('id')\n    const [sortAsc, setSortAsc] = useState(true)\n    const [filterTerms, setFilterTerms] = useState({})\n\n    const newUser = {\n        id: 10 + Math.round(Math.random() * 100),\n        name: 'Edwin Thomas',\n        age: 41,\n        city: 'Miami',\n        state: 'FL',\n    }\n\n    const [allUsersSelected, setAllUsersSelected] = useState(false)\n\n    const fetchUsers = () => {\n        const timer = setTimeout(() => {\n            setUsers(sampleList)\n            clearTimeout(timer)\n        }, 500)\n    }\n\n    const handleSelectAllUsers = () => {\n        toggleSelectAllUsers(!allUsersSelected)\n        setAllUsersSelected(!allUsersSelected)\n    }\n\n    return (\n        <div>\n            <div>\n                <button\n                    onClick={() => {\n                        fetchUsers()\n                    }}>\n                    Fetch Users\n                </button>\n                &nbsp;\n                <button\n                    onClick={() => {\n                        addUser(newUser, 2)\n                    }}>\n                    Add User\n                </button>\n                &nbsp;\n                <button\n                    onClick={() => {\n                        deleteUser(0)\n                    }}>\n                    Delete First User\n                </button>\n                &nbsp;\n                <button\n                    onClick={() => {\n                        deleteUsers(\n                            users.reduce((indices, user, userIndex) => {\n                                user.chosen && indices.push(userIndex)\n                                return indices\n                            }, []),\n                        )\n                    }}>\n                    Delete Selected Users\n                </button>\n            </div>\n            <br />\n            <table>\n                <thead>\n                    <tr>\n                        <th style={{ width: '20px' }}>\n                            <input type=\"checkbox\" checked={allUsersSelected} onChange={handleSelectAllUsers} />\n                        </th>\n                        {columns.map(column => (\n                            <th style={{ width: column.width }}>\n                                <div\n                                    style={{ paddingBottom: '10px' }}\n                                    onClick={() => {\n                                        sortUsers(column.id, !sortAsc)\n                                        setSortByColumnId(column.id)\n                                        setSortAsc(!sortAsc)\n                                    }}>\n                                    {column.title} {column.id === sortByColumnId && (sortAsc ? <span>&#9650;</span> : <span>&#9660;</span>)}\n                                </div>\n                                <div>\n                                    <input\n                                        type=\"text\"\n                                        style={{ width: '100%' }}\n                                        placeholder=\"Search\"\n                                        value={filterTerms[column.id] || ''}\n                                        onChange={event => {\n                                            const term = event.target.value\n                                            filterUsers(column.id, term)\n                                            setFilterTerms(prevState => {\n                                                return {...prevState, [column.id]: term}\n                                            })\n                                        }}\n                                    />\n                                </div>\n                            </th>\n                        ))}\n                    </tr>\n                </thead>\n                {users && users.length > 0 ? (\n                    <tbody>\n                        {users\n                            .filter(user => user && user.isMatched)\n                            .map((user, userIndex) => (\n                                <tr key={user.id} className={user.chosen ? 'selected-row' : ''}>\n                                    <td>\n                                        <input\n                                            type=\"checkbox\"\n                                            checked={!!user.chosen}\n                                            onChange={evt => {\n                                                toggleSelectUser(userIndex, evt.target.checked)\n                                            }}\n                                        />\n                                    </td>\n                                    <td>{user.id}</td>\n                                    <td>{user.name}</td>\n                                    <td>{user.age}</td>\n                                    <td>{user.city}</td>\n                                    <td>{user.state}</td>\n                                    <td>{user.hobbies && user.hobbies.join(', ')}</td>\n                                    <td>{String(user.chosen)}</td>\n                                    <td>{String(user.isMatched)}</td>\n                                </tr>\n                            ))}\n                    </tbody>\n                ) : (\n                    <tbody>\n                        <tr>\n                            <td colSpan={10}>No users found.</td>\n                        </tr>\n                    </tbody>\n                )}\n            </table>\n        </div>\n    )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}